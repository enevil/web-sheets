{"ast":null,"code":"import { UPDATE_TARGET_DATE, LOAD_SIDE_PERSONS, LOAD_MAIN_DATE, SHOW_WORKSHIFT, NEXT_SIDE_PAGE, UPDATE_SEARCH_PERSON, SWITCH_ON_LOADING, SWITCH_OFF_LOADING } from \"../types\";\nimport axios from \"axios\";\nimport { domain } from \"../../config\";\nexport function updateTargetDate(newTargetDate) {\n  return {\n    type: UPDATE_TARGET_DATE,\n    payload: newTargetDate\n  };\n}\nexport function loadSidePersons(date) {\n  return async dispatch => {\n    dispatch({\n      type: SWITCH_ON_LOADING\n    });\n    axios.get(`${domain}/api/get_side_persons`, {\n      params: {\n        date: date\n      }\n    }).then(response => {\n      dispatch({\n        type: LOAD_SIDE_PERSONS,\n        payload: response.data.persons\n      });\n      dispatch({\n        type: SWITCH_OFF_LOADING\n      });\n    }).catch(function (error) {\n      console.log(error);\n      dispatch({\n        type: SWITCH_OFF_LOADING\n      });\n    });\n  };\n}\nexport function loadMainDate(personId) {\n  return async dispatch => {\n    dispatch({\n      type: SWITCH_ON_LOADING\n    });\n    axios.get(`${domain}/api/get_person`, {\n      params: {\n        personId\n      }\n    }).then(response => {\n      const {\n        name,\n        workShifts\n      } = response.data;\n      workShifts.sort((a, b) => {\n        const d1 = new Date(a.date);\n        const d2 = new Date(b.date);\n        return d1 - d2;\n      });\n      const wsParseDate = workShifts.map(item => {\n        return { ...item,\n          date: new Date(new Date(item.date).setHours(0))\n        };\n      });\n      dispatch({\n        type: LOAD_MAIN_DATE,\n        workShifts: wsParseDate,\n        personName: name\n      });\n      dispatch({\n        type: SWITCH_OFF_LOADING\n      });\n    }).catch(function (error) {\n      console.log(error);\n      dispatch({\n        type: SWITCH_OFF_LOADING\n      });\n    });\n  };\n}\nexport function showWorkshift() {\n  let workshift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Нет\";\n  return {\n    type: SHOW_WORKSHIFT,\n    payload: workshift\n  };\n}\nexport function nextSidePage(prev) {\n  if (prev === \"reset\") {\n    return {\n      type: NEXT_SIDE_PAGE,\n      payload: 0\n    };\n  }\n\n  return {\n    type: NEXT_SIDE_PAGE,\n    payload: prev + 1\n  };\n}\nexport function updateSearchPerson(searcherValue) {\n  return async dispatch => {\n    dispatch({\n      type: SWITCH_ON_LOADING\n    });\n    axios.get(`${domain}/api/livesearch`, {\n      params: {\n        search: searcherValue\n      }\n    }).then(response => {\n      const {\n        persons\n      } = response.data;\n      dispatch({\n        type: UPDATE_SEARCH_PERSON,\n        payload: persons\n      });\n      dispatch({\n        type: SWITCH_OFF_LOADING\n      });\n    }).catch(function (error) {\n      console.log(error);\n      dispatch({\n        type: SWITCH_OFF_LOADING\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/Work/websheets/src/redux/calendar/calendarActions.js"],"names":["UPDATE_TARGET_DATE","LOAD_SIDE_PERSONS","LOAD_MAIN_DATE","SHOW_WORKSHIFT","NEXT_SIDE_PAGE","UPDATE_SEARCH_PERSON","SWITCH_ON_LOADING","SWITCH_OFF_LOADING","axios","domain","updateTargetDate","newTargetDate","type","payload","loadSidePersons","date","dispatch","get","params","then","response","data","persons","catch","error","console","log","loadMainDate","personId","name","workShifts","sort","a","b","d1","Date","d2","wsParseDate","map","item","setHours","personName","showWorkshift","workshift","nextSidePage","prev","updateSearchPerson","searcherValue","search"],"mappings":"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","sourcesContent":["import {\r\n  UPDATE_TARGET_DATE,\r\n  LOAD_SIDE_PERSONS,\r\n  LOAD_MAIN_DATE,\r\n  SHOW_WORKSHIFT,\r\n  NEXT_SIDE_PAGE,\r\n  UPDATE_SEARCH_PERSON,\r\n  SWITCH_ON_LOADING,\r\n  SWITCH_OFF_LOADING,\r\n} from \"../types\";\r\nimport axios from \"axios\";\r\nimport { domain } from \"../../config\";\r\n\r\nexport function updateTargetDate(newTargetDate) {\r\n  return {\r\n    type: UPDATE_TARGET_DATE,\r\n    payload: newTargetDate,\r\n  };\r\n}\r\n\r\nexport function loadSidePersons(date) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: SWITCH_ON_LOADING,\r\n    });\r\n    axios\r\n      .get(`${domain}/api/get_side_persons`, {\r\n        params: { date: date },\r\n      })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: LOAD_SIDE_PERSONS,\r\n          payload: response.data.persons,\r\n        });\r\n        dispatch({\r\n          type: SWITCH_OFF_LOADING,\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        dispatch({\r\n          type: SWITCH_OFF_LOADING,\r\n        });\r\n      });\r\n  };\r\n}\r\n\r\nexport function loadMainDate(personId) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: SWITCH_ON_LOADING,\r\n    });\r\n    axios\r\n      .get(`${domain}/api/get_person`, {\r\n        params: { personId },\r\n      })\r\n      .then((response) => {\r\n        const { name, workShifts } = response.data;\r\n        workShifts.sort((a, b) => {\r\n          const d1 = new Date(a.date);\r\n          const d2 = new Date(b.date);\r\n          return d1 - d2;\r\n        });\r\n        const wsParseDate = workShifts.map((item) => {\r\n          return { ...item, date: new Date(new Date(item.date).setHours(0)) };\r\n        });\r\n\r\n        dispatch({\r\n          type: LOAD_MAIN_DATE,\r\n          workShifts: wsParseDate,\r\n          personName: name,\r\n        });\r\n        dispatch({\r\n          type: SWITCH_OFF_LOADING,\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        dispatch({\r\n          type: SWITCH_OFF_LOADING,\r\n        });\r\n      });\r\n  };\r\n}\r\n\r\nexport function showWorkshift(workshift = \"Нет\") {\r\n  return {\r\n    type: SHOW_WORKSHIFT,\r\n    payload: workshift,\r\n  };\r\n}\r\n\r\nexport function nextSidePage(prev) {\r\n  if (prev === \"reset\") {\r\n    return {\r\n      type: NEXT_SIDE_PAGE,\r\n      payload: 0,\r\n    };\r\n  }\r\n  return {\r\n    type: NEXT_SIDE_PAGE,\r\n    payload: prev + 1,\r\n  };\r\n}\r\n\r\nexport function updateSearchPerson(searcherValue) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: SWITCH_ON_LOADING,\r\n    });\r\n    axios\r\n      .get(`${domain}/api/livesearch`, {\r\n        params: { search: searcherValue },\r\n      })\r\n      .then((response) => {\r\n        const { persons } = response.data;\r\n        dispatch({\r\n          type: UPDATE_SEARCH_PERSON,\r\n          payload: persons,\r\n        });\r\n        dispatch({\r\n          type: SWITCH_OFF_LOADING,\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        dispatch({\r\n          type: SWITCH_OFF_LOADING,\r\n        });\r\n      });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}